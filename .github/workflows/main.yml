# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI-CD with Gradle and Docker

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  IMAGE_NAME: soccer-manager
  IMAGE_TAG: latest

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
      with:
        aws-access-key-id: ${{ secrets.awsAccessKeyId }}
        aws-secret-access-key: ${{ secrets.awsSecretAccessKey }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.IMAGE_NAME }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        # docker build . --file Dockerfile --tag ${{ env.IMAGE_TAG }}
        docker build -t $ECR_REGISTRY/socccer-manager:${{ env.IMAGE_TAG }} .
        docker push $ECR_REGISTRY/socccer-manager:${{ env.IMAGE_TAG }}
        echo "::set-output name=image::$ECR_REGISTRY/socccer-manager:${{ env.IMAGE_TAG }}"
